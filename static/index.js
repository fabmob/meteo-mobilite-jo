const { BrowserRouter, Route, Switch, Link, useParams } = ReactRouterDOM

const transportModeColorMap = {
    "NOT_DEFINED": "#B4B4B4", // gray
    "UNKNOWN": "#969696", // Olympic Silver
    "PASSENGER_CAR": "#F0282D", // Olympic red
    "MOTORCYCLE": "#FA841E", // Orange
    "HEAVY_DUTY_VEHICLE": "#FFB114", // Light Orange
    "BUS": "#FFB114", // Olympic yellow
    "COACH": "#E67324", // Dark orange
    "RAIL_TRIP": "#0078D0", // Olympic blue
    "BOAT_TRIP": "#00287F", // Dark blue
    "BIKE_TRIP": "#6BDB83", // Light green
    "PLANE": "#980F30", // Dark red
    "SKI": "#FF9196", // Light red
    "FOOT": "#00A651", // Olympic green
    "IDLE": "#996B4F", // Bronze
    "OTHER": "#E5E5E5", // Very light gray
    "SCOOTER": "#005A46", // Dark green
    "HIGH_SPEED_TRAIN": "#5ED6FF", // Light blue
    "PT": "#0078D0", // Olympic blue
}
const transportModeTranslate = {
    "NOT_DEFINED": "non d√©fini",
    "UNKNOWN": "inconnu",
    "PASSENGER_CAR": "la voiture",
    "MOTORCYCLE": "la moto",
    "HEAVY_DUTY_VEHICLE": "le camion",
    "BUS": "le bus",
    "COACH": "la navette",
    "RAIL_TRIP": "le train",
    "BOAT_TRIP": "le bateau",
    "BIKE_TRIP": "le v√©lo",
    "PLANE": "l'avion",
    "SKI": "le ski",
    "FOOT": "la marche",
    "IDLE": "inactif",
    "OTHER": "autre",
    "SCOOTER": "la trotinette",
    "HIGH_SPEED_TRAIN": "le train haute vitesse"
}
const transportModeEmoji = {
    "NOT_DEFINED": "‚ùî",
    "UNKNOWN": "‚ùî",
    "PASSENGER_CAR": "üöó",
    "MOTORCYCLE": "üèçÔ∏è",
    "HEAVY_DUTY_VEHICLE": "üöö",
    "BUS": "üöå",
    "COACH": "üöå",
    "RAIL_TRIP": "üöá",
    "BOAT_TRIP": "üõ≥Ô∏è",
    "BIKE_TRIP": "üö≤",
    "PLANE": "‚úàÔ∏è",
    "SKI": "‚õ∑Ô∏è",
    "FOOT": "üëü",
    "IDLE": "‚ùî",
    "OTHER": "‚ùî",
    "SCOOTER": "üõ¥",
    "HIGH_SPEED_TRAIN": "üöÑ"
}
const sites = [
    "Arena Bercy",
    "Arena Champ-de-Mars",
    "Arena Paris Nord",
    "Arena Paris Sud",
    "Arena Porte de La Chapelle",
    "Centre Aquatique",
    "Centre National de Tir de Ch√¢teauroux",
    "Ch√¢teau de Versailles",
    "Colline d'Elancourt",
    "Grand Palais",
    "H√¥tel de Ville",
    "Invalides",
    "La Concorde",
    "Golf National",
    "Marina de Marseille",
    "Parc des Princes",
    "Paris La D√©fense Arena",
    "Pont Alexandre III",
    "Site d'escalade Bourget",
    "Saint-Quentin-en-Yvelines",
    "Stade de Bordeaux",
    "Stade de France",
    "Stade de la Beaujoire",
    "Stade de Lyon",
    "Stade de Marseille",
    "Stade de Nice",
    "Stade Geoffroy-Guichard",
    "Stade Nautique de Vaires-sur-Marne",
    "Stade Pierre Mauroy",
    "Stade Roland-Garros",
    "Stade Tour Eiffel",
    "Stade Yves-du-Manoir",
    // "Teahupo'o, Tahiti",
    "Trocad√©ro",
]

const availableColors = ["#B4B4B4", "#969696", "#F0282D", "#FA841E", "#FFB114", "#FFB114", "#E67324", "#0078D0", "#00287F", "#6BDB83", "#980F30", "#FF9196", "#00A651", "#996B4F", "#005A46", "#5ED6FF"]
const sitesColorMap = {}
for (let i = 0; i < sites.length; i++) {
    sitesColorMap[sites[i]] = availableColors[i%availableColors.length]
}
const daysofweek = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi']
const daysColorMap = {}
for (let i = 0; i < daysofweek.length; i++) {
    daysColorMap[daysofweek[i]] = availableColors[(i*2)%availableColors.length]
}

const Site = () => {
    const {siteName} = useParams()
    const url = new URL(window.location.href)
    const [toDATE, setToDate] = React.useState(url.searchParams.get("date") || "2024-08-11")

    const [data, setData] = React.useState(null)
    const [yesterdayData, setYesterdayData] = React.useState(null)
    const [siteBehavior, setSiteBehavior] = React.useState(null)
    React.useEffect(() => {
        const fetchData = async () => {
            try {
                let _data = await (await fetch(`/data/sites/${siteName}/${toDATE}/modal_share.json`)).json()
                _data.favoriteArrivalMode = ""
                _data.favoriteDepartureMode = ""
                let maxVal = 0
                for (const mode in _data.end_percents_count) {
                    if (Object.hasOwnProperty.call(_data.end_percents_count, mode)) {
                        const element = _data.end_percents_count[mode]
                        if (element > maxVal) {
                            maxVal = element
                            _data.favoriteArrivalMode = mode
                        }
                    }
                }
                maxVal = 0
                for (const mode in _data.start_percents_count) {
                    if (Object.hasOwnProperty.call(_data.start_percents_count, mode)) {
                        const element = _data.start_percents_count[mode]
                        if (element > maxVal) {
                            maxVal = element
                            _data.favoriteDepartureMode = mode
                        }
                    }
                }
                setData(_data)
            } catch (error) {
                console.log(siteName, "data couldn't be fetched", error)
                setData(null)
            }

            let yesterDATE = new Date(toDATE)
            yesterDATE.setDate(yesterDATE.getDate() - 1)
            yesterDATE = yesterDATE.toISOString().split("T")[0]
            try {
                setYesterdayData(await (await fetch(`/data/sites/${siteName}/${yesterDATE}/modal_share.json`)).json())
            } catch (error) {
                console.log(siteName, "yesterday data couldn't be fetched", error, "trying default 2024-05-12")
                try {
                    setYesterdayData(await (await fetch(`/data/sites/${siteName}/2024-05-12/modal_share.json`)).json())
                } catch (error) {
                    console.log(siteName, "default yesterday data couldn't be fetched either")
                    setYesterdayData(null)
                }
            }
            try {
                setSiteBehavior((await (await fetch(`/data/sites/sites_behavior.json`)).json())[siteName])
            } catch (error) {
                console.log(siteName, "sites behavior data couldn't be fetched", error)
                setSiteBehavior(null)
            }
            
        }
        fetchData()
    }, [siteName, toDATE])

    const setToDateAndParam = (d) => {
        setToDate(d)
        url.searchParams.set("date", d)
        history.pushState({}, '', url.href)
    }

    const reduceBehaviorDict = (key, ignoredSite) => {
        let reducedDict = {}
        for (let site in siteBehavior) {
            if (Object.hasOwnProperty.call(siteBehavior, site)) {
                if (site == ignoredSite) continue
                const siteVal = siteBehavior[site]
                if (siteVal[key] > 0) {
                    if (site === "Aucun") site = "Aucun, c'est le premier site visit√©"
                    reducedDict[site] = siteVal[key]
                }
            }
        }
        return reducedDict
    }

    const arrivalEvolution = (data && yesterdayData) ? Math.round((data.end.Total_Count - yesterdayData.end.Total_Count) / data.end.Total_Count * 100) : 0
    const departureEvolution = (data && yesterdayData) ? Math.round((data.start.Total_Count - yesterdayData.start.Total_Count) / data.start.Total_Count * 100) : 0
    return (
        <section className="section">
            <h1 className="title">
                {siteName}, le <DateSelector date={toDATE} setDate={setToDateAndParam} />
            </h1>
            { !data ? <h2 className="subtitle">Pas assez de donn√©es disponibles sur ce site √† cette date</h2> :
                <div>
                    <h2 className="subtitle">Arriv√©es au site</h2>
                    <div className="columns">
                        <div className="column is-4 content">
                            <ul>
                                <li>Pour rejoindre le site, le mode de transport favoris√© est <span className="tag is-info"><b>{transportModeTranslate[data.favoriteArrivalMode]} {transportModeEmoji[data.favoriteArrivalMode]}</b></span></li>
                                <li>L'impact CO2 moyen de ces d√©placements est estim√© √† <span className="tag is-info"><b>{(data.start.Total_Emission/data.start.Total_Count).toFixed(2)} kgCO2</b></span></li>
                                <li>Compar√©e √† la veille, la quantit√© d'arriv√©es a √©volu√© de {arrivalEvolution >= 0 ? <span className="tag is-success"><b>+{arrivalEvolution}%</b></span> : <span className="tag is-danger"><b>{arrivalEvolution}%</b></span>}</li>
                            </ul>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Modes utilis√©s lors des {data.end && data.end.Total_Count} voyages</h2>
                            <BarChart dataJson={data.end.Count} labelColorMap={transportModeColorMap} />
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data.end && data.end.Total_Distance)} km totaux parcourus</h2>
                            <PieChart dataJson={data.end_percents_distance} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data.end && data.end.Total_Duration/60/60)}h totales de voyage</h2>
                            <PieChart dataJson={data.end_percents_duration} labelColorMap={transportModeColorMap}/>
                        </div>
                    </div>
                    <h2 className="subtitle">D√©parts du site</h2>
                    <div className="columns">
                        <div className="column is-4 content">
                            <ul>
                                <li>Pour quitter le site, le mode de transport favoris√© est <span className="tag is-info"><b>{transportModeTranslate[data.favoriteDepartureMode]} {transportModeEmoji[data.favoriteDepartureMode]}</b></span></li>
                                <li>L'impact CO2 moyen de ces d√©placements est estim√© √† <span className="tag is-info"><b>{(data.end.Total_Emission/data.end.Total_Count).toFixed(2)} kgCO2</b></span></li>
                                <li>Compar√©e √† la veille, la quantit√© de d√©parts a √©volu√© de {departureEvolution >= 0 ? <span className="tag is-success"><b>+{departureEvolution}%</b></span> : <span className="tag is-danger"><b>{departureEvolution}%</b></span>}</li>
                            </ul>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Modes utilis√©s lors des {data.start && data.start.Total_Count} voyages</h2>
                            <BarChart dataJson={data.start.Count} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data.start && data.start.Total_Distance)} km totaux parcourus</h2>
                            <PieChart dataJson={data.start_percents_distance} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data.start && data.start.Total_Duration/60/60)}h totales de voyage</h2>
                            <PieChart dataJson={data.start_percents_duration} labelColorMap={transportModeColorMap}/>
                        </div>
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">Zones populaires de d√©part des trajets se rendant au site</h2>
                            <GeojsonMap geojsonURL={`/data/sites/${siteName}/${toDATE}/origin_zones.geojson`} zoomLevel="5"/>
                            <div className="row">
                                L√©gende: <span className="tag has-text-dark" style={{"background": "linear-gradient(90deg, rgba(1,255,0,1) 0%, rgba(245,255,0,1) 50%, rgba(255,0,0,1) 100%)"}}>Nombre de trajets</span>
                            </div>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">Zones populaires d'arriv√©e des trajets quittant le site</h2>
                            <GeojsonMap geojsonURL={`/data/sites/${siteName}/${toDATE}/destination_zones.geojson`} zoomLevel="5"/>
                            <div className="row">
                                L√©gende: <span className="tag has-text-dark" style={{"background": "linear-gradient(90deg, rgba(1,255,0,1) 0%, rgba(245,255,0,1) 50%, rgba(255,0,0,1) 100%)"}}>Nombre de trajets</span>
                            </div>
                        </div>
                    </div>
                    
                </div>
            }
            <hr/>
            {siteBehavior && <h1 className="title">
                {siteName}, statistiques g√©n√©rales, sur l'ensemble de la p√©riode des jeux
            </h1>}
            {siteBehavior && <div>
                <h2 className="subtitle">Comportement des visiteurs</h2>
                <div className="columns">
                    {siteBehavior[siteName] && <div className="column content">
                        <ul>
                            <li><span className="tag is-info"><b>{siteBehavior.total_unique_users} visiteurs</b></span> se sont rendus sur le site, totalisant <span className="tag is-info"><b>{siteBehavior.total_unique_journeys} trajets</b></span></li>
                            <li style={{"listStyleType": "none"}}><ul><li>Les visiteurs sont en moyenne venus <span className="tag is-info"><b>{siteBehavior.average_visits_per_user.toFixed(1)} fois</b></span></li></ul></li>
                            <li><span className="tag is-info"><b>{Math.round(siteBehavior[siteName].unique_users_who_also_visited * 100 / siteBehavior.total_unique_users)}%</b></span> des visiteurs sont revenus sur le site au moins une fois</li>
                            <li style={{"listStyleType": "none"}}><ul><li>Ces derniers sont en moyenne venus <span className="tag is-info"><b>{(siteBehavior[siteName].times_this_was_also_visited / siteBehavior[siteName].unique_users_who_also_visited).toFixed(1)} fois</b></span></li></ul></li>
                            <li>Les voyages se rendant sur site durent en moyenne <span className="tag is-info"><b>{(siteBehavior.mean_trip_duration_seconds/60).toFixed(1)} minutes</b></span></li>
                            <li>Le mode de transport (hors marche) le plus utilis√© est <span className="tag is-info"><b>{transportModeTranslate[siteBehavior.most_common_transport]} {transportModeEmoji[siteBehavior.most_common_transport]}</b></span>, avec <span className="tag is-info"><b>{siteBehavior.most_common_transport_total_unique_journeys} trajets</b></span></li>
                            <li style={{"listStyleType": "none"}}><ul><li>Les trajets contenant ce mode durent en moyenne <span className="tag is-info"><b>{(siteBehavior.mean_trip_duration_seconds_including_most_common_transport/60).toFixed(1)} minutes</b></span></li></ul></li>
                            <li style={{"listStyleType": "none"}}><ul><li>Dont <span className="tag is-info"><b>{(siteBehavior.mean_trip_duration_seconds_with_most_common_transport/60).toFixed(1)} minutes</b></span> avec ce mode</li></ul></li>
                        </ul>
                    </div>}
                    <div className="column">
                        <h2 className="subtitle is-6">Les visiteurs de {siteName} ont aussi visit√© (nb visiteurs)</h2>
                        <BarChart dataJson={reduceBehaviorDict("unique_users_who_also_visited", siteName)} labelColorMap={sitesColorMap} label="visiteurs" />
                    </div>
                    <div className="column">
                        <h2 className="subtitle is-6">Les visiteurs de {siteName} ont aussi visit√© (nb visites)</h2>
                        <BarChart dataJson={reduceBehaviorDict("times_this_was_also_visited", siteName)} labelColorMap={sitesColorMap} label="visites" />
                    </div>
                </div>
                <h2 className="subtitle">D√©placements avant de se rendre sur le site</h2>
                <div className="columns">
                    <div className="column">
                        <h2 className="subtitle is-6">Dernier site visit√© avant {siteName}</h2>
                        <BarChart dataJson={reduceBehaviorDict("times_this_was_the_previous_visited_site")} labelColorMap={sitesColorMap} label="visites" />
                    </div>
                    <div className="column">
                        <h2 className="subtitle is-6">Temps moyen entre les visites</h2>
                        <BarChart dataJson={reduceBehaviorDict("mean_duration_between_visits_in_hours")} labelColorMap={sitesColorMap} label="heures" />
                    </div>
                </div>
                
            </div>
            }
            
            <hr/>
            <h1 className="title">Naviger vers un autre site</h1>
            <div className="buttons has-addons">
                {sites.map(site => <Link key={site} to={"/sites/" + site}><button className={`button ${siteName == site ? "is-info is-selected" : ""}`}>{site}</button></Link>)}
            </div>
        </section>
    )
}

const SitesSection = () => {
    const [toDATE, setToDate] = React.useState("2024-08-11")
    const [popularSites, setPopularSites] = React.useState([])
    const [yesterdayPopularSites, setYesterdayPopularSites] = React.useState([])
    
    React.useEffect(() => {
        const fetchData = async () => {
            try {
                const _data = await (await fetch(`data/sites_popularity/${toDATE}.json`)).json()
                setPopularSites(_data)
            } catch(e) {
                console.log("could not load data at date", toDATE)
                setPopularSites([])
            }
            let yesterDATE = new Date(toDATE)
            yesterDATE.setDate(yesterDATE.getDate() - 1)
            yesterDATE = yesterDATE.toISOString().split("T")[0]
            try {
                setYesterdayPopularSites(await (await fetch(`data/sites_popularity/${yesterDATE}.json`)).json())
            } catch(e) {
                console.log("could not load yesterday data at date", yesterDATE, "trying default 2024-05-12")
                try {
                    setYesterdayPopularSites(await (await fetch(`data/sites_popularity/2024-05-12.json`)).json())
                } catch(e) {
                    console.log("could not load yesterday data at default date either")
                    setYesterdayPopularSites([])
                }
            }
        }
        fetchData()
    }, [toDATE])
    const yesterdayPopularSitesNames = yesterdayPopularSites.map(x => x.name)
    for (let i = 0; i < popularSites.length; i++) {
        const yesterdayIndex = yesterdayPopularSitesNames.indexOf(popularSites[i].name)
        popularSites[i].indexDiff = i - yesterdayIndex
    }
    return (
        <section className="section">
            <div className="container">
                <h1 className="title">
                    Vue par sites olympiques, le <DateSelector date={toDATE} setDate={setToDate} />
                </h1>
                {!popularSites.length ? <h2 className="subtitle">Donn√©es non disponibles √† cette date</h2>
                : <div className="columns">
                    <div className="column">
                        <h2 className="subtitle">Sites les plus populaires</h2>
                        <div className="content">
                            <ol>
                                {popularSites.map(x => <li key={x.name}>
                                    {x.indexDiff == 0 ? <span className="tag position-tag is-warning">+0</span>
                                    : x.indexDiff > 0 ? <span className="tag position-tag is-danger">+{x.indexDiff}</span>
                                    : <span className="tag position-tag is-success">{x.indexDiff}</span>}
                                    <span><Link to={`/sites/${x.name}/?date=${toDATE}`}>{x.name}</Link>, {x.arrivals} arriv√©es sur le site, {x.departures} d√©parts</span>
                                </li>)}
                            </ol>
                        </div>
                    </div>
                    <div className="column">
                        <h2 className="subtitle">Mode favoris√© par site</h2>
                        <div className="content">
                            <ol style={{"lineHeight": "25px"}}>
                                {popularSites.map(x => <li key={x.name}>{x.name}: Arriv√©es {transportModeEmoji[x.prefered_arrival_mode]}, D√©parts {transportModeEmoji[x.prefered_departure_mode]}</li>)}
                            </ol>
                        </div>
                    </div>
                </div>
                }
                {/* <h2 className="subtitle">Choisir un site pour plus de d√©tails</h2>
                <div className="buttons has-addons">
                    {sites.map(site => <Link key={site} to={"/sites/" + site}><button className="button">{site}</button></Link>)}
                </div> */}
                
            </div>
        </section>
    )
}
const GeneralStats = () => {
    const [data, setData] = React.useState(14)
    return (
        <div className="main">
            <section className="section">
                <div className="container">
                    <h1 className="title">
                        R√©partition habituelle des d√©placements
                    </h1>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">R√©partition des d√©placement en voiture</h2>
                            <GeojsonMap geojsonURL="data/car.geojson"/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">R√©partition des d√©placement en v√©lo</h2>
                            <GeojsonMap geojsonURL="data/cycle.geojson"/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">R√©partition des d√©placement √† pied</h2>
                            <GeojsonMap geojsonURL="data/walk.geojson"/>
                        </div>
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">Part modale Traces</h2>
                            <PieChart dataUrl="data/modal_share_gps.json" labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">Part modale Compteurs</h2>
                            <PieChart dataUrl="data/modal_share_compteurs.json" labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">Part modale EMG</h2>
                            <PieChart dataUrl="data/modal_share_EMG.json" labelColorMap={transportModeColorMap}/>
                        </div>
                    </div>

                    <div className="row">
                        <h1 className="subtitle">P√¥les g√©n√©rateurs et receveurs de mobilit√© par heure (3 trajets et plus)</h1>
                        <input className="input" type="range" min="0" max="23" value={data} onChange={e => setData(e.target.value)} />
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle is-6">Origines des d√©placements √† {data}h</h2>
                            <GeojsonMap geojsonURL={"data/origins/origins_" + data + "h.geojson"}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Destination des d√©placements √† {data}h</h2>
                            <GeojsonMap geojsonURL={"data/destinations/destinations_" + data + "h.geojson"}/>
                        </div>
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">Part modale par zone (rouge = 100% motoris√©, vert = 100% v√©lo/marche)</h2>
                            <GeojsonMap geojsonURL="data/h3_modal_share.geojson"/>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    )
}
const Exode = () => {
    const [minCount, setMinCount] = useState(4)
    const [toDATE, setToDate] = React.useState("2024-08-11")
    return (
        <div className="main">
            <section className="section">
                <div className="container">
                    <h1 className="title">
                        Grands mouvements de population, le <DateSelector date={toDATE} setDate={setToDate}/>
                    </h1>
                    <p>
                        Zones affich√©es √† partir de <b>{minCount}</b> voyages, changez ce filtre avec le s√©lecteur ci-dessous.
                    </p>
                    <div>
                        <input className="input" type="range" min="4" max="100" value={minCount} onChange={e => setMinCount(e.target.value)} />
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">Voyageurs quittant l'√éle-de-france</h2>
                            <GeojsonMap geojsonURL={`data/exode/${toDATE}/exode.geojson`} geojsonURL2={`data/exode/${toDATE}/exode_lines.geojson`} minCount={minCount} opacity="0.2" zoomLevel="5"/>
                            <div className="row">
                                L√©gende: <span className="tag is-success">Train</span> <span className="tag is-warning">Voiture</span> <span className="tag is-danger">Avion</span> <span className="tag has-background-dark has-text-white">Inconnu</span>, Epaisseur du trait: nombre de voyages
                            </div>
                        </div>
                        <div className="column">
                            <h2 className="subtitle">Voyageurs arrivants en √éle-de-france</h2>
                            <GeojsonMap geojsonURL={`data/exode/${toDATE}/inxode.geojson`} geojsonURL2={`data/exode/${toDATE}/inxode_lines.geojson`} minCount={minCount} opacity="0.2" zoomLevel="5"/>
                            <div className="row">
                                L√©gende: <span className="tag is-success">Train</span> <span className="tag is-warning">Voiture</span> <span className="tag is-danger">Avion</span> <span className="tag has-background-dark has-text-white">Inconnu</span>, Epaisseur du trait: nombre de voyages
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    )
}

const EMG_Compare = () => {
    const [data, setData] = React.useState(null)
    const [modalZones, setModalZones] = React.useState("paris_paris")
    const [multimodalChoice, setMultimodalChoice] = React.useState("rer")
    React.useEffect(() => {
        const fetchData = async () => {
            try {
                let _data = await (await fetch(`/data/emg_compare.json`)).json()
                setData(await (await fetch(`/data/emg_compare.json`)).json())
            } catch (error) {
                console.log("data couldn't be fetched", error)
                setData(null)
            }
        }
        fetchData()
    }, [])
    return (
        <div className="main">
            <section className="section">
                <div className="container">
                    <h1 className="title">
                        Comparaison avec les d√©placements franciliens habituels (<a href="https://www.institutparisregion.fr/mobilite-et-transports/deplacements/enquete-regionale-sur-la-mobilite-des-franciliens/" target="_blank">EMG 2023</a>)
                    </h1>
                    <article className="message is-info">
                        <div className="message-body content">
                            <p>D√©but avril 2024, l'Institut Paris R√©gion a <a href="https://www.institutparisregion.fr/mobilite-et-transports/deplacements/enquete-regionale-sur-la-mobilite-des-franciliens/" target="_blank">publi√© les r√©sultats de son Enqu√™te Mobilit√© par GPS (EMG)</a> afin de diversifier la connaissance de la mobilit√© des Franciliens un an et demi apr√®s la fin de la pand√©mie de Covid-19. Elle compl√®te la traditionnelle Enqu√™te Globale Transport (EGT) men√©e par l‚ÄôAutorit√© organisatrice de la mobilit√©, √éle-de-France Mobilit√©s et cofinanc√©e par l'Etat.</p>
                            <p>Cette enqu√™te permet de poser des bases de comparaisons pour les donn√©es r√©colt√©es pendant la p√©riode des jeux. Elle permet aussi d'isoler les biais dans nos donn√©es, et d'en questionner la qualit√©.</p>
                            <p>Cette page est donc diff√©rente des autres, avec la pr√©sence d'encarts explicatifs, comme celui-ci, pour caract√©riser les r√©sultats et en tirer des apprentissages.</p>
                        </div>
                    </article>
                </div>
                <br/>
                {data && <div className="container">
                    <h2 className="subtitle">Nombre de d√©placements par jour de la semaine</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>Dans les deux cas, nous retrouvons une chute attendue du nombre de d√©placements les weekends. </p>
                            <p>Pendant les JO, les d√©placements sont mieux r√©partis sur la semaine, avec une augmentation significative le dimanche.</p>
                            <p>Le 3√®me graphique nous donne un ordre de grandeur du nombre de voyages consid√©r√©s pour nos r√©sultats (plus de 750 000 r√©alis√©s par ~17 000 personnes).</p>
                        </div>
                    </article>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG (millions)</h3>
                            <BarChart dataJson={data.nb_journey_days.emg.NbJourney} labelColorMap={daysColorMap} />
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG (%)</h3>
                            <PieChart dataJson={data.nb_journey_days.emg.percent} labelColorMap={daysColorMap} label="Pourcentage des d√©placements"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO</h3>
                            <BarChart dataJson={data.nb_journey_days.data.NbJourney} labelColorMap={daysColorMap}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO (%)</h3>
                            <PieChart dataJson={data.nb_journey_days.data.percent} labelColorMap={daysColorMap} label="Pourcentage des d√©placements"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.nb_journey_days.diff} labelColorMap={daysColorMap} label="diff %"/>
                        </div>
                    </div>

                    <h2 className="subtitle">Part des individus ne se d√©pla√ßant pas par jour de la semaine</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>M√™me si les r√©sultats sont similaires aux constats pr√©c√©dents, un premier biais existe : l'EMG cible les franciliens alors que nos donn√©es portent sur les d√©placements en √éle-de-France, qu'ils soient franciliens ou non.</p>
                            <p>Il faut donc faire des choix dans le comptage des individus, un utilisateur n'√©tant venu en √éle-de-France qu'un weekend ne s'est techniquement pas d√©plac√© en √éle-de-France un mardi par exemple.</p>
                            <p>Pour √©viter ces faux positifs, nous limitons la recherche aux individus avec au moins 7 jours de d√©placements pendant les jeux. Ce choix augmente la probabilit√© que l'individu soit rest√© durant l'ensemble de la p√©riode.</p>
                        </div>
                    </article>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG (%)</h3>
                            <BarChart dataJson={data.users_not_moving.emg.percent_users_not_moving} label="pourcent" labelColorMap={daysColorMap} maxAxisVal={50} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO (%)</h3>
                            <BarChart dataJson={data.users_not_moving.data.percent_users_not_moving} label="pourcent" labelColorMap={daysColorMap} maxAxisVal={50} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.users_not_moving.diff} labelColorMap={daysColorMap} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>

                    <h2 className="subtitle">D√©placements par heure de la journ√©e</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>Les enqu√™tes classiques, focalis√©es sur les d√©placements r√©guliers, mettent en avant les trois pics d'activit√©s: matin, midi et un √©talement le soir.</p>
                            <p>Pendant les jeux, qui correspondent aussi aux cong√©s d'√©t√© pour certains, ces pics sont moins prononc√©s, et les d√©placements sont plus tardifs.</p>
                        </div>
                    </article>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG (%)</h3>
                            <BarChart dataJson={data.nb_journey_hour.emg.percent} label="pourcent" maxAxisVal={16} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO (%)</h3>
                            <BarChart dataJson={data.nb_journey_hour.data.percent} label="pourcent" maxAxisVal={16} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.nb_journey_hour.diff} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>

                    <h2 className="subtitle">Grandes Moyennes</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>Pour les m√™mes raisons de d√©placements moins r√©guliers, le nombre moyen de d√©placements par jour diminue aussi pendant les jeux. Nous avons fait le choix de ne consid√©rer que les jours avec au moins un d√©placement.</p>
                            <p>La dur√©e moyenne de d√©placement r√©duit aussi. Notons que pour ces deux indicateurs, seuls les d√©placements commen√ßants et terminant en √éle-de-France sont consid√©r√©s. Il est possible que les enqu√™tes consid√®rent aussi les d√©placements des franciliens hors Ile-de-France.</p>
                            <p>Le taux d'occupation des voitures met en avant un autre biais dans la source de nos donn√©es. L'application utilis√©e encourage fortement la pratique du covoiturage, r√©sultant en un taux anormalement haut. Un constat √† garder en t√™te lors de prochaines observation avec une part importante de d√©placement en voiture.</p>
                        </div>
                    </article>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG</h3>
                            <ul>
                                <li>Nombre moyen de d√©placements par jour par personne <span className="tag is-info"><b>{data.nb_daily_journey_per_user.emg}</b></span></li>
                                <li>Dur√©e moyenne de d√©placement par personne par jour <span className="tag is-info"><b>{data.avg_daily_traveling_time.emg} minutes</b></span></li>
                                <li>Taux d'occupation des voitures <span className="tag is-info"><b>{data.occupancy.emg} personnes</b></span></li>
                            </ul>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO</h3>
                            <ul>
                                <li>Nombre moyen de d√©placements par jour par personne <span className="tag is-info"><b>{data.nb_daily_journey_per_user.data.toFixed(2)}</b></span></li>
                                <li>Dur√©e moyenne de d√©placement par personne par jour <span className="tag is-info"><b>{data.avg_daily_traveling_time.data.toFixed(0)} minutes</b></span></li>
                                <li>Taux d'occupation des voitures <span className="tag is-info"><b>{data.occupancy.data.toFixed(2)} personnes</b></span></li>
                            </ul>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff</h3>
                            <ul>
                                <li>Nombre moyen de d√©placements par jour par personne <span className="tag is-info"><b>{(data.nb_daily_journey_per_user.data - data.nb_daily_journey_per_user.emg).toFixed(2)}</b></span></li>
                                <li>Dur√©e moyenne de d√©placement par personne par jour <span className="tag is-info"><b>{(data.avg_daily_traveling_time.data - data.avg_daily_traveling_time.emg).toFixed(0)} minutes</b></span></li>
                                <li>Taux d'occupation des voitures <span className="tag is-info"><b>+{(data.occupancy.data - data.occupancy.emg).toFixed(2)} personnes</b></span></li>
                            </ul>
                        </div>
                    </div>

                    <h2 className="subtitle">Part modales</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>√Ä l'exception des trajets en grande couronne, ou les petits trajets √† pied sont peut-√™tre ignor√©s dans les enqu√™tes, la part modale de la voiture est toujours sup√©rieure dans nos donn√©es JO.</p>
                            <p>Ce constat, combin√© au tr√®s faible taux de d√©placement en bus, laisse supposer un probl√®me de d√©tection du mode de d√©placement, entre bus et voiture. Avec une partie des trajets voiture qui devraient se retrouver dans la part transport en commun</p>
                            <p>Dans <a href="https://www.6-t.co/etudes/comment-les-parisien-ne-s-et-les-petit-e-s-couronnais-es-adopteront-leur-mobilite-pendant-les-jeux-olympiques-paris-2024" target="_blank">son √©tude, le bureau de recherche 6t</a> pr√©disait une r√©duction des d√©placements en voiture et transports √† Paris pendant les jeux, au profit de la mobilit√© douce.</p>
                            <p>Lorsqu'elles sont compar√©es √† l'EMG, nos donn√©es semblent indiquer le contraire. Mais en observant les diff√©rences de comportement entre les m√™mes utilisateurs en mai 2024 et durant les jeux (√©chantillon: ~650 personnes), nous observons:</p>
                            <ul>
                                <li>Une augmentation de 11% des d√©placements √† v√©lo (plus ou moins conforme √† la pr√©diction 6t).</li>
                                <li>Une diminution de 18% des d√©placements en bus (conforme √† la pr√©diction 6t).</li>
                                <li>Des taux de d√©placements similaires sur les autres modes (le taux de marche n'a donc pas augment√© pendant les jeux, contrairement √† la pr√©diction 6t, de m√™me pour l'utilisation de la voiture, qui n'a pas diminu√©).</li>
                            </ul>
                            <p>Cela confirme en cons√©quence un biais dans les donn√©es, avec une surrepr√©sentation de la voiture compar√© aux autres modes. Cela encourage aussi les comparaisons entre p√©riodes avec la m√™me source, plut√¥t qu'entre des sources diff√©rentes.</p>
                        </div>
                    </article>
                    <div className="buttons has-addons">
                        <button onClick={_ => setModalZones("paris_paris")} className={`button ${modalZones == "paris_paris" ? "is-info is-selected" : ""}`}>{"Paris <-> Paris"}</button>
                        <button onClick={_ => setModalZones("paris_idf_pc")} className={`button ${modalZones == "paris_idf_pc" ? "is-info is-selected" : ""}`}>{"Paris <-> Petite Couronne"}</button>
                        <button onClick={_ => setModalZones("paris_idf_gc")} className={`button ${modalZones == "paris_idf_gc" ? "is-info is-selected" : ""}`}>{"Paris <-> Grande Couronne"}</button>
                        <button onClick={_ => setModalZones("idf_idf_gc")} className={`button ${modalZones == "idf_idf_gc" ? "is-info is-selected" : ""}`}>{"Grande Couronne <-> Grande Couronne"}</button>
                        <button onClick={_ => setModalZones("idf_idf_pc")} className={`button ${modalZones == "idf_idf_pc" ? "is-info is-selected" : ""}`}>{"Petite Couronne <-> Petite Couronne"}</button>
                    </div>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">{"EMG (%)"}</h3>
                            <PieChart dataJson={data.modal_shares.emg[modalZones].percent} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">{"JO (%)"}</h3>
                            <PieChart dataJson={data.modal_shares.data[modalZones].percent} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.modal_shares.diff[modalZones]} labelColorMap={transportModeColorMap} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>
                                        
                    <h2 className="subtitle">Dur√©e moyenne des deplacements par mode</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>Ici, les r√©sultats diff√®rent grandement car les enqu√™tes mesurent le budget-temps journalier moyen par mode de transport, alors que nos donn√©es illustrent le temps de trajet moyen par mode. La mesure en budget-temps est un indicateur qui se valorise mieux sur les trajets r√©guliers du quotidien, il a moins d'int√©r√™t sur les p√©riodes exceptionnelles.</p>
                            <p>Il n'est pas clair si dans l'EMG, seules les journ√©es o√π le mode est utilis√© sont comptabilis√©s. Par exemple, une personne prenant le bus une heure, un jour sur deux, a-t-elle un budget-temps d'une heure, ou de 30 minutes ?</p>
                            <p>De plus, tous les trajets √©tant par nature multimodaux (avec la marche en d√©but et fin), il n'est pas clair si l'EMG compte la dur√©e porte-√†-porte, ou le temps exact pass√© dans le transport. Nous affichons la diff√©rence √† titre d'exemple sur nos donn√©es.</p>
                            <p>Ces questions rendent la comparaison difficile. Les seuls constats exploitables r√©sident dans la comparaison entre les modes, avec un temps de marche plus long pendant les jeux que le v√©lo ou la voiture, ce qui contraire √† l'habituel.</p>
                        </div>
                    </article>
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG (minutes)</h3>
                            <BarChart dataJson={data.avg_duration_per_mode.emg.duration} labelColorMap={transportModeColorMap} label="minutes" maxAxisVal={60}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO trajet complet (minutes)</h3>
                            <BarChart dataJson={data.avg_duration_per_mode.data.full_journey.journey_duration} labelColorMap={transportModeColorMap} label="minutes" maxAxisVal={60}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO mode de transport uniquement (minutes)</h3>
                            <BarChart dataJson={data.avg_duration_per_mode.data.mode_only.duration} labelColorMap={transportModeColorMap} label="minutes" maxAxisVal={60}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.avg_duration_per_mode.diff.duration} labelColorMap={transportModeColorMap} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>

                    <h2 className="subtitle">Multimodalit√© des trajets avec du train</h2>
                    <article className="message is-small">
                        <div className="message-body content">
                            <p>Ce dernier indicateur questionne les diff√©rents modes utilis√©s par les franciliens lors de leurs d√©placements en train. La marche n'√©tant pas consid√©r√©e comme un mode √† part enti√®re dans les r√©sultats d'enqu√™te, nous l'ignorons aussi dans les r√©sultats ci-dessous.</p>
                            <p>Pour que cet indicateur ait de la valeur, les donn√©es sources doivent pouvoir diff√©rencier entre les diff√©rents modes e√©rr√©s (m√©tro, tram, train). Cette diff√©renciation est complexe avec des donn√©es GPS, rendant les comparaisons difficiles avec l'EMG.</p>
                            <p>Ces indicateurs mettent √† nouveau en avant la sous-repr√©sentation des trajets en bus dans nos donn√©es. En particulier la confusion de ces derniers avec la voiture. En effet, dans l'EMG, les trajets avec une composante train comprennent 10x plus de trajets avec une part bus que de voiture. Nos donn√©es indiquent 20x plus de part voiture que bus.</p>
                            <p>Une telle diff√©rence emp√™che de tirer une quelconque observation.</p>
                        </div>
                    </article>
                    <div className="buttons has-addons">
                        <button onClick={_ => setMultimodalChoice("rer")} className={`button ${multimodalChoice == "rer" ? "is-info is-selected" : ""}`}>RER/Train</button>
                        <button onClick={_ => setMultimodalChoice("metro")} className={`button ${multimodalChoice == "metro" ? "is-info is-selected" : ""}`}>Metro</button>
                    </div>
                    {multimodalChoice == "rer" ? <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG Nombre de modes utilis√©s lors des trajets avec du RER/Train (%)</h3>
                            <PieChart dataJson={data.multimodal_train_trips.emg.nb_unique_modes_rer.percent} label="Pourcentage des trajets"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO Nombre de modes utilis√©s lors des trajets ferr√©s (%)</h3>
                            <PieChart dataJson={data.multimodal_train_trips.data.nb_unique_modes.percent} label="Pourcentage des trajets"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.diff.nb_unique_modes_rer} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>
                    :
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG Nombre de modes utilis√©s lors des trajets avec du Metro (%)</h3>
                            <PieChart dataJson={data.multimodal_train_trips.emg.nb_unique_modes_metro.percent} label="Pourcentage des trajets"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO Nombre de modes utilis√©s lors des trajets ferr√©s (%)</h3>
                            <PieChart dataJson={data.multimodal_train_trips.data.nb_unique_modes.percent} label="Pourcentage des trajets"/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.diff.nb_unique_modes_metro} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>
                    }

                    {multimodalChoice == "rer" ? <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG Parts des modes utilis√©s lors des trajets avec du RER/Train (%)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.emg.nb_journey_per_modes_rer.percent} labelColorMap={transportModeColorMap} label="part modale" maxAxisVal={100} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO Parts des modes utilis√©s lors des trajets avec du train (%)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.data.nb_journey_per_modes.percent} labelColorMap={transportModeColorMap} label="part modale" maxAxisVal={100} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.diff.nb_journey_per_modes_rer} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>
                    :
                    <div className="columns">
                        <div className="column content">
                            <h3 className="subtitle is-6">EMG Parts des modes utilis√©s lors des trajets avec du Metro (%)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.emg.nb_journey_per_modes_metro.percent} labelColorMap={transportModeColorMap} label="part modale" maxAxisVal={100} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">JO Parts des modes utilis√©s lors des trajets avec du train (%)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.data.nb_journey_per_modes.percent} labelColorMap={transportModeColorMap} label="part modale" maxAxisVal={100} reverseAxis={false}/>
                        </div>
                        <div className="column content">
                            <h3 className="subtitle is-6">Diff (points)</h3>
                            <BarChart dataJson={data.multimodal_train_trips.diff.nb_journey_per_modes_metro} label="diff %" reverseAxis={false}/>
                        </div>
                    </div>
                    }
                    
                </div>}
            </section>
        </div>
    )
}
const Home = () => {
    return (
        <div className="main">
            <section className="section">
                <div className="container">
                    <div className="content">
                        <h1 className="title">
                            Introduction
                        </h1>
                        <p>Ce projet est une preuve de concept de tableau de bord pour suivre les √©volutions de la mobilit√© jour apr√®s jour durant les Jeux olympiques de l'√©t√© 2024.</p>

                        <h2 className="subtitle">Consultez les tableaux de bord:</h2>
                        <div className="buttons">
                            <Link to="/ceremonie_ouverture"><button className="button is-primary">C√©r√©monie d'ouverture</button></Link>
                            <Link to="/sites"><button className="button is-primary">Statistiques par site Olympique</button></Link>
                            {/* <Link to="/general"><button className="button is-primary">Statistiques g√©n√©rales</button></Link> */}
                            <Link to="/exode"><button className="button is-primary">Grands Mouvements</button></Link>
                            <Link to="/emg_compare"><button className="button is-primary">Comparaison enqu√™te mobilit√©</button></Link>
                        </div>

                        <h2 className="subtitle">Une preuve de concept port√©e par:</h2>
                        <div className="columns">
                            <div className="column is-2">
                                <a href="https://lafabriquedesmobilites.fr" target="_blank">
                                    <img src="https://lafabriquedesmobilites.fr/images/fabmob_cmjn1.svg" style={{"maxHeight": "80px"}}></img>
                                </a>
                            </div>
                            <div className="column is-2">
                                <a href="https://www.moovance.fr" target="_blank">
                                    <img src="/images/Logo_MOOVANCE-02.png" style={{"maxHeight": "80px"}}></img>
                                </a>
                            </div>
                        </div>

                        <h2 className="subtitle">Donn√©es sources</h2>
                        <p>Le projet exploite des donn√©es de traces de mobilit√©s et d'open data comme sources. Il est donc aussi une preuve de concept technique d'indicateurs constructibles √† partir de traces de mobilit√©s. Ces derni√®res sont d√©finies comme un trajet effectu√© par une personne au sein d'un unique mode de transport. On y retrouve g√©n√©ralement :</p>
                        <ul>
                            <li>Un identifiant utilisateur</li>
                            <li>Le mode de transport utilis√© (marche, v√©lo, bus, voiture personnelle, etc.)</li>
                            <li>Les dates de d√©part et d'arriv√©e</li>
                            <li>Une s√©rie de coordonn√©es (latitude et longitude), souvent appel√©e "trace GPS"</li>
                            <li>(optionnel) la raison du d√©placement</li>
                        </ul>
                        <p>Parfois, ces donn√©es sont assimilables aux donn√©es de "Floating Car Data" ou "Floating Cellular Data", avec comme diff√©rence l'usage de smartphones comme outil de mesure, permettant une meilleure pr√©cision et une meilleure identification du mode de transport.</p>

                        <p>Cette preuve de concept entre dans un ensemble de projets port√©s par la Fabrique des Mobilit√©s en 2024-2025 autour des traces de mobilit√©s. Consultez <a href="https://wiki.lafabriquedesmobilites.fr/wiki/Programme_%E2%80%9CConnaissance_des_mobilit%C3%A9s%E2%80%9D">ce document</a> pour plus de d√©tails et pour y participer.</p>

                        <p><b>Note importante</b>: du fait de leur source (application mobile), les donn√©es ne sont naturellement ni exhaustives, ni repr√©sentatives de l'ensemble de la population. Elles sont limit√©es aux utilisateurs de l'application mobile Moovance, une population relativement jeune et technophile. </p>
                        
                    </div>
                </div>
            </section>
        </div>
    )   
}
const CeremonieOuverture = () => {
    const [data, setData] = React.useState(null)
    const [zone, setZone] = React.useState("all")
    // const [yesterdayData, setYesterdayData] = React.useState(null)
    React.useEffect(() => {
        const fetchData = async () => {
            try {
                let _data = await (await fetch(`/data/ceremony/modal_share.json`)).json()
                for (const _zone of ["all", "red_zone", "black_zone"]) {
                    _data[_zone].favoriteMode = ""
                    let maxVal = 0
                    for (const mode in _data[_zone].percents_count) {
                        if (Object.hasOwnProperty.call(_data[_zone].percents_count, mode)) {
                            const element = _data[_zone].percents_count[mode]
                            if (element > maxVal) {
                                maxVal = element
                                _data[_zone].favoriteMode = mode
                            }
                        }
                    }
                }
                setData(_data)
            } catch (error) {
                console.log("data couldn't be fetched", error)
                setData(null)
            }
            
        }
        fetchData()
    }, [])
    const evolution = 0

    return (
        <div className="main">
            <section className="section">
                <div className="container">
                    <h1 className="title">
                        D√©placement durant la c√©remonie d'ouverture JO 2024
                    </h1>
                    <h2 className="subtitle">Statistiques g√©n√©rales des voyages commen√ßants ou arrivants dans une zone</h2>
                    <div className="buttons has-addons">
                        <button onClick={_ => setZone("all")} className={`button ${zone == "all" ? "is-info is-selected" : ""}`}>Ensemble des donn√©es</button>
                        <button onClick={_ => setZone("red_zone")} className={`button ${zone == "red_zone" ? "is-info is-selected" : ""}`}>Zone rouge</button>
                        <button onClick={_ => setZone("black_zone")} className={`button ${zone == "black_zone" ? "is-info is-selected" : ""}`}>Zone anti-terroriste</button>
                    </div>
                    <div className="columns">
                        <div className="column content">
                            <ul>
                                {zone === "all" && <li>Par d√©faut, nous consid√©rons <span className="tag is-info">tous les trajets parisiens</span>. Utilisez les boutons ci-dessus pour filtrer sur une zone sp√©cifique.</li>}
                                {zone === "red_zone" && <li>La <span className="tag is-danger">zone rouge</span> est une zone de circulation interdite pour les v√©hicules motoris√©s. Des d√©rogations sont possibles avec un pass-jeux.</li>}
                                {zone === "black_zone" && <li>La <span className="tag is-dark">zone antiterroriste</span> est une zone d'acc√®s totalement interdite, sauf exceptions et d√©tenteurs de billets pour la c√©r√©monie.</li>}
                                <br/>
                                {data && data[zone] && <li>Notre √©chantillon: <span className="tag is-info"><b>{data[zone].stats.Total_Users}</b></span> personnes</li>}
                                {data && data[zone] && <li>Le mode de transport favoris√© est <span className="tag is-info"><b>{transportModeTranslate[data[zone].favoriteMode]} {transportModeEmoji[data[zone].favoriteMode]}</b></span></li>}
                                {data && data[zone] && <li>L'impact CO2 moyen de ces d√©placements est estim√© √† <span className="tag is-info"><b>{(data[zone].stats.Total_Emission/data[zone].stats.Total_Count).toFixed(2)} kgCO2</b></span></li>}
                                {/* {data && data[zone] && <li>Compar√©e √† un vendredi classique, la quantit√© de d√©placements a √©volu√© de {evolution >= 0 ? <span className="tag is-success"><b>+{evolution}%</b></span> : <span className="tag is-danger"><b>{evolution}%</b></span>}</li>} */}
                            </ul>
                        </div>
                        <div className="column">
                            {zone === "all" && <GeojsonMap geojsonURL="data/zones/paris.geojson" forceHeight="250px" forceColor="rgb(102, 209, 255)"/>}
                            {zone === "red_zone" && <GeojsonMap geojsonURL="data/zones/ceremony_red.geojson" forceHeight="250px" forceColor="rgb(255, 102, 133)"/>}
                            {zone === "black_zone" && <GeojsonMap geojsonURL="data/zones/ceremony_silt.geojson" forceHeight="250px" forceColor="rgb(46, 51, 61)"/>}
                        </div>
                    </div>
                    {data && data[zone] && <div className="columns">
                        <div className="column">
                            <h2 className="subtitle is-6">Modes utilis√©s lors des {data[zone].stats.Total_Count} voyages</h2>
                            <BarChart dataJson={data[zone].stats.Count} labelColorMap={transportModeColorMap} />
                            <p style={{"marginTop": "-30px", "fontSize": "12px"}}><i>Note: un voyage peut contenir plusieurs modes de transport</i></p>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data[zone].stats.Total_Distance)} km totaux parcourus</h2>
                            <PieChart dataJson={data[zone].percents_distance} labelColorMap={transportModeColorMap}/>
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">Repartition des {Math.round(data[zone].stats.Total_Duration/60/60)}h totales de voyage</h2>
                            <PieChart dataJson={data[zone].percents_duration} labelColorMap={transportModeColorMap}/>
                        </div>
                    </div>
                    }
                    {zone === "all" && <div className="columns">
                        <div className="column">
                            <h2 className="subtitle is-6">D√©placements par quart d'heure</h2>
                            <StackedBarChart dataUrl="data/ceremony/trips_per_15_min.json" labelColorMap={transportModeColorMap} />
                        </div>
                    </div>}
                    {zone === "black_zone" && <div className="columns">
                        <div className="column">
                            <h2 className="subtitle is-6">Arriv√©es dans la zone</h2>
                            <StackedBarChart dataUrl="data/ceremony/black_zone_entry.json" labelColorMap={transportModeColorMap} />
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">D√©parts de la zone</h2>
                            <StackedBarChart dataUrl="data/ceremony/black_zone_exits.json" labelColorMap={transportModeColorMap} />
                        </div>
                    </div>}
                    {zone === "red_zone" && <div className="columns">
                        <div className="column">
                            <h2 className="subtitle is-6">Arriv√©es dans la zone</h2>
                            <StackedBarChart dataUrl="data/ceremony/red_zone_entry.json" labelColorMap={transportModeColorMap} />
                        </div>
                        <div className="column">
                            <h2 className="subtitle is-6">D√©parts de la zone</h2>
                            <StackedBarChart dataUrl="data/ceremony/red_zone_exits.json" labelColorMap={transportModeColorMap} />
                        </div>
                    </div>}
                    <div className="content">
                        <p>Rappel des moments forts de la c√©r√©monie:</p>
                        <ul>
                            <li>18h30: les visiteurs sont arriv√©s dans les zones et patientent dans les files d'attente</li>
                            <li>19h30: la c√©r√©monie commence</li>
                            <li>21h45: passage du bateau fran√ßais, fin du d√©fil√© des athl√®tes</li>
                            <li>22h30: la c√©r√©monie s'encha√Æne au Trocad√©ro</li>
                            <li>23h15: la vasque olympique est allum√©e </li>
                            <li>23h30: fin de c√©r√©monie</li>
                        </ul>
                    </div>
                    <hr />
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">Mode de transport favoris√© le jour de la c√©r√©monie</h2>
                            <GeojsonMap geojsonURL="data/ceremony_h3_modal_share_tc_in_clean.geojson"/>
                            <div className="row">
                                L√©gende: <span className="tag is-success">0% des trajets sont en voiture ou moto</span> <span className="tag is-warning">50% des trajets sont motoris√©s</span> <span className="tag is-danger">100% des trajets sont motoris√©s</span>
                            </div>
                        </div>
                    </div>
                    <div className="columns">
                        <div className="column">
                            <h2 className="subtitle">√âvolution des modes de transports favoris√©s, compar√© √† un jour normal</h2>
                            <GeojsonMap geojsonURL="data/ceremony_h3_modal_change_tc_in_clean.geojson"/>
                            <div className="row">
                                L√©gende: <span className="tag is-success">Trajets nettement moins motoris√©s qu'habituellement</span> <span className="tag is-light">Peu de changements par rapport √† l'habituel</span> <span className="tag is-danger">Trajets nettement plus motoris√©s qu'habituellement</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    )
}
const Footer = () => {
    return (
        <footer className="footer">
            <div className="content has-text-centered">
                <p>
                    Un site propos√© en <a href="https://github.com/fabmob/meteo-mobilite-jo">open source</a> par <a href="https://lafabriquedesmobilites.fr/">la Fabrique des Mobilit√©s</a>, propuls√© grace aux donn√©es de <a href="https://www.moovance.fr/">Moovance</a>.<br/>
                    Donn√©es sources ni exhaustives, ni repr√©sentatives de la population. Limit√©es aux utilisateurs de l'application Moovance.
                </p>
            </div>
        </footer>
    )
}
const App = () => {
    return (
        <BrowserRouter>
            <NavBar></NavBar>
            <Switch>
                <Route path="/sites/:siteName">
                    <Site/>
                </Route>
                <Route path="/sites">
                    <SitesSection />
                </Route>
                <Route path="/general">
                    <GeneralStats />
                </Route>
                <Route path="/emg_compare">
                    <EMG_Compare />
                </Route>
                <Route path="/exode">
                    <Exode />
                </Route>
                <Route path="/ceremonie_ouverture">
                    <CeremonieOuverture />
                </Route>
                <Route path="/">
                    <Home />
                </Route>
            </Switch>
            <Footer />
        </BrowserRouter>
    )
}

const container = document.getElementById('root')
const root = ReactDOM.createRoot(container)
root.render(<App />)